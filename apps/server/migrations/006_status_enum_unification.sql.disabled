-- Status Enum Unification Migration
-- Migrates reddit_posts status column to unified enum system
-- Adds missing status states needed for progressive UI workflow

-- First, backup the current status values for rollback
CREATE TEMPORARY TABLE IF NOT EXISTS status_backup_006 AS
SELECT id, status as old_status FROM reddit_posts;

-- Update existing reddit_posts table status constraint
-- Drop the old constraint
DROP TABLE IF EXISTS reddit_posts_old;
ALTER TABLE reddit_posts RENAME TO reddit_posts_old;

-- Create new reddit_posts table with unified status enum
CREATE TABLE reddit_posts (
    id TEXT PRIMARY KEY,
    reddit_id TEXT UNIQUE NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    url TEXT NOT NULL,
    author TEXT NOT NULL,
    upvotes INTEGER NOT NULL DEFAULT 0,
    comments INTEGER NOT NULL DEFAULT 0,
    created_date TIMESTAMP NOT NULL,
    score REAL NOT NULL DEFAULT 0,
    status TEXT NOT NULL CHECK (status IN (
        'discovered', 'idea_selected', 'script_generating', 'script_generated', 
        'script_approved', 'script_generation_failed', 'rejected', 'assets_ready', 
        'rendering', 'completed', 'failed'
    )) DEFAULT 'discovered',
    discovered_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Migrate data with status value mapping
INSERT INTO reddit_posts (
    id, reddit_id, title, content, url, author, upvotes, comments, 
    created_date, score, status, discovered_at, updated_at
)
SELECT 
    id, reddit_id, title, content, url, author, upvotes, comments,
    created_date, score,
    CASE 
        -- Map legacy database statuses to unified statuses
        WHEN status = 'idea' THEN 'discovered'
        WHEN status = 'script_rejected' THEN 'rejected'
        
        -- Keep unified statuses as-is
        WHEN status = 'discovered' THEN 'discovered'
        WHEN status = 'idea_selected' THEN 'idea_selected'
        WHEN status = 'script_generating' THEN 'script_generating'
        WHEN status = 'script_generated' THEN 'script_generated'
        WHEN status = 'script_approved' THEN 'script_approved'
        WHEN status = 'script_generation_failed' THEN 'script_generation_failed'
        WHEN status = 'rejected' THEN 'rejected'
        WHEN status = 'assets_ready' THEN 'assets_ready'
        WHEN status = 'rendering' THEN 'rendering'
        WHEN status = 'completed' THEN 'completed'
        WHEN status = 'failed' THEN 'failed'
        
        -- Default unknown statuses to discovered
        ELSE 'discovered'
    END as status,
    discovered_at, 
    updated_at
FROM reddit_posts_old;

-- Drop the old table
DROP TABLE reddit_posts_old;

-- Recreate indexes
CREATE INDEX idx_reddit_posts_status ON reddit_posts(status);
CREATE INDEX idx_reddit_posts_score ON reddit_posts(score DESC);

-- Update generation_queue status constraint to match new workflow
-- Drop old constraint and recreate table
DROP TABLE IF EXISTS generation_queue_old;
ALTER TABLE generation_queue RENAME TO generation_queue_old;

CREATE TABLE generation_queue (
    id TEXT PRIMARY KEY,
    post_id TEXT NOT NULL REFERENCES reddit_posts(id) ON DELETE CASCADE,
    status TEXT NOT NULL CHECK (status IN ('pending', 'processing', 'completed', 'failed')) DEFAULT 'pending',
    priority INTEGER NOT NULL DEFAULT 0,
    attempts INTEGER NOT NULL DEFAULT 0,
    max_attempts INTEGER NOT NULL DEFAULT 3,
    generation_params TEXT NOT NULL, -- JSON serialized ScriptGenerationRequest params
    progress_percentage INTEGER NOT NULL DEFAULT 0 CHECK (progress_percentage BETWEEN 0 AND 100),
    error_message TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    worker_id TEXT -- ID of processing worker for tracking
);

-- Migrate generation_queue data (no status mapping needed as these are different statuses)
INSERT INTO generation_queue (
    id, post_id, status, priority, attempts, max_attempts, generation_params,
    progress_percentage, error_message, created_at, started_at, completed_at, worker_id
)
SELECT 
    id, post_id, status, priority, attempts, max_attempts, generation_params,
    progress_percentage, error_message, created_at, started_at, completed_at, worker_id
FROM generation_queue_old;

-- Drop old table
DROP TABLE generation_queue_old;

-- Recreate generation_queue indexes
CREATE INDEX idx_generation_queue_status ON generation_queue(status);
CREATE INDEX idx_generation_queue_priority ON generation_queue(priority DESC, created_at ASC);
CREATE INDEX idx_generation_queue_post_id ON generation_queue(post_id);

-- Create audit log table for status transitions
CREATE TABLE status_audit_log (
    id TEXT PRIMARY KEY,
    post_id TEXT NOT NULL REFERENCES reddit_posts(id) ON DELETE CASCADE,
    old_status TEXT NOT NULL,
    new_status TEXT NOT NULL,
    trigger_event TEXT NOT NULL, -- 'api_call', 'script_generation', 'user_action', etc.
    metadata TEXT, -- JSON serialized additional context
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by TEXT -- User ID or system process
);

-- Index for audit log queries
CREATE INDEX idx_status_audit_post_id ON status_audit_log(post_id);
CREATE INDEX idx_status_audit_created_at ON status_audit_log(created_at DESC);

-- Create trigger for automatic status change logging
CREATE TRIGGER log_status_changes
    AFTER UPDATE OF status ON reddit_posts
    FOR EACH ROW
    WHEN OLD.status != NEW.status
BEGIN
    INSERT INTO status_audit_log (id, post_id, old_status, new_status, trigger_event, created_at)
    VALUES (
        lower(hex(randomblob(16))),
        NEW.id,
        OLD.status,
        NEW.status,
        'database_update',
        CURRENT_TIMESTAMP
    );
END;

-- Update updated_at trigger for reddit_posts
DROP TRIGGER IF EXISTS update_reddit_posts_timestamp;
CREATE TRIGGER update_reddit_posts_timestamp
    AFTER UPDATE ON reddit_posts
    FOR EACH ROW
BEGIN
    UPDATE reddit_posts 
    SET updated_at = CURRENT_TIMESTAMP 
    WHERE id = NEW.id;
END;

-- Create stored procedure-like function for status validation (using views for SQLite)
-- Status validation view that shows invalid status transitions
CREATE VIEW invalid_status_transitions AS
SELECT 
    r.id,
    r.status as current_status,
    'Invalid status in database' as validation_error
FROM reddit_posts r
WHERE r.status NOT IN (
    'discovered', 'idea_selected', 'script_generating', 'script_generated', 
    'script_approved', 'script_generation_failed', 'rejected', 'assets_ready', 
    'rendering', 'completed', 'failed'
);

-- Migration completion marker will be handled by migration runner

-- Migration validation queries
-- These can be run to verify migration success:

-- 1. Check all posts have valid statuses:
-- SELECT COUNT(*) FROM invalid_status_transitions; -- Should return 0

-- 2. Count posts by new status:
-- SELECT status, COUNT(*) FROM reddit_posts GROUP BY status ORDER BY COUNT(*) DESC;

-- 3. Check audit log is working:
-- UPDATE reddit_posts SET status = 'idea_selected' WHERE status = 'discovered' LIMIT 1;
-- SELECT * FROM status_audit_log ORDER BY created_at DESC LIMIT 1;

-- Migration summary:
-- ✅ Updated reddit_posts status constraint to unified enum (11 statuses)
-- ✅ Migrated existing status values using mapping
-- ✅ Added missing statuses: script_generating, script_generation_failed  
-- ✅ Created status_audit_log table for transition tracking
-- ✅ Added trigger for automatic status change logging
-- ✅ Created validation view for invalid statuses
-- ✅ Preserved all existing data with backward compatibility